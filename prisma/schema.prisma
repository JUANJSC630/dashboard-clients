// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Company {
  id           String  @id @default(uuid())
  userId       String
  name         String  @db.Text
  description  String? @db.Text
  profileImage String  @db.Text
  nit          String  @db.Text
  phone        String  @db.Text
  country      String  @db.Text
  website      String  @db.Text

  contact Contact[]

  events Event[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Contact {
  id String @id @default(uuid())

  companyId String @db.Text

  name  String @db.Text
  role  String @db.Text
  email String @db.Text
  phone String @db.Text

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([companyId])
}

model Event {
  id String @id @default(uuid())

  companyId String @db.Text

  title      String   @db.Text
  start      DateTime
  allDay     Boolean
  timeFormat String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([companyId])
}

model Customer {
  id               String    @id @default(uuid())
  userId           String
  firstName        String
  lastName         String
  email            String
  phone            String
  address          String
  registrationDate DateTime  @default(now())
  notes            String?
  projects         Project[]
  invoices         Invoice[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id          String   @id @default(uuid())
  customerId  String   @db.Text
  name        String
  description String
  startDate   DateTime
  endDate     DateTime
  status      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  customer Customer  @relation(fields: [customerId], references: [id])
  invoices Invoice[]

  @@index([customerId])
}

model Invoice {
  id          String   @id @default(uuid())
  customerId  String   @db.Text
  projectId   String   @db.Text
  issueDate   DateTime
  dueDate     DateTime
  totalAmount Float
  status      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  customer Customer @relation(fields: [customerId], references: [id])
  project  Project  @relation(fields: [projectId], references: [id])

  @@index([customerId])
  @@index([projectId])
}
